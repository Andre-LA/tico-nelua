#ifndef TICO_SERIALIZATION_H
#define TICO_SERIALIZATION_H

#include "tico.h"
// same as cJSON_ArrayForEach
#define tico_field_foreach(element, array) for(element = (array != NULL) ? (array)->child : NULL; element != NULL; element = element->next)

#define FIELD_FUNCTION(func_name, ...) \
func_name (tc_Field *field, __VA_ARGS__)

#define FIELD_TYPE(name_p, type_t) \
TIC_API void tico_template_insert_##name_p(tc_Template *temp, const char *name, type_t value); \
TIC_API void tico_template_remove_##name_p(tc_Template *temp, const char *name); \
TIC_API tc_Field* tico_field_create_##name_p(const char *name, type_t value); \
TIC_API void tico_field_push_##name_p(tc_Field *field, const char *name, type_t value); \
TIC_API void tico_field_set_##name_p(tc_Field *field, const char* name , type_t value); \
TIC_API type_t tico_field_get_##name_p(tc_Field *field); \
TIC_API void tico_field_imgui_##name_p(tc_Field *field); \
TIC_API void tico_field_draw_##name_p(tc_Field *field, tc_Vec2 pos, float scale); \
TIC_API tc_Field* tico_field_##name_p##_from_json(cJSON *json); \
TIC_API cJSON* tico_field_##name_p##_to_json(tc_Field *field, int data_only);

typedef struct tc_Field tc_Field;
typedef struct tc_Meta tc_Meta;

typedef enum {
  TIC_FIELD_UNKNOWN = 0,
  TIC_FIELD_NUMBER,
  TIC_FIELD_STRING,
  TIC_FIELD_BOOLEAN,
  TIC_FIELD_VEC2,
  TIC_FIELD_VEC3,
  TIC_FIELD_VEC4,
  TIC_FIELD_CIRCLE,
  TIC_FIELD_ARRAY,
  TIC_FIELD_OBJECT,
  TIC_FIELD_REFERENCE
} TIC_FIELD_TYPE_;

struct tc_Field {
	TIC_FIELD_TYPE_ type;
  char name[128];
  tc_Meta *meta;

  float number;
  char string[256];
  int boolean;
  tc_Color color;
  tc_Vec2 vec2;
  tc_Vec3 vec3;
  union {
    tc_Vec4 vec4;
    tc_Rectf rect;
  };
  tc_Circlef circle;
  tc_Field *ref;

  tc_Field *prev;
  tc_Field *next;
  tc_Field *parent;
  tc_Field *child;
};

typedef map_t(struct tc_Field*) map_field_t;

struct tc_Meta {
  map_field_t fields;
};

typedef struct tc_Template {
	char uuid[8];
	tc_Field *root;
} tc_Template;

// typedef struct tc_Object {
//   tc_Meta meta;
//   tc_Fields *fields;
// } tc_Object;

TIC_API tc_Template tico_template_create();
TIC_API void tico_template_init(tc_Template *temp, cJSON *json);
TIC_API void tico_template_destroy(tc_Template *temp);
TIC_API int tico_template_insert_json(tc_Template *temp, cJSON *item);
TIC_API void tico_template_remove(tc_Template *temp, const char *name, int index);

TIC_API void tico_template_imgui(tc_Template *temp);
TIC_API void tico_template_draw(tc_Template *temp, tc_Vec2 pos, float scale);
// TIC_API void tico_template_insert_number(tc_V)
// TIC_API void tico_template_insert_vec2(tc_Template *temp, const char *name, tc_Vec2 vec);
TIC_API cJSON* tico_template_to_json(tc_Template *temp, int data_only);
TIC_API cJSON* tico_field_to_json(tc_Field *field, int data_only);

TIC_API void tico_field_add(tc_Field *field_obj, const char *name, tc_Field *child);
TIC_API void tico_field_push(tc_Field *field, tc_Field *new_field);

TIC_API tc_Field* tico_field_create(int type, const char *name);
TIC_API tc_Field* tico_field_from_json(cJSON *data);
TIC_API void tico_field_destroy(tc_Field *destroy);
TIC_API tc_Field* tico_field_from_json_template(cJSON *data);
TIC_API void tico_field_clear(tc_Field *field);
TIC_API void tico_field_remove(tc_Field *field, const char *name, int index);
TIC_API void tico_field_add_child(tc_Field *field, const char *name);
TIC_API void tico_field_remove_child(tc_Field *field, const char *name, int index);
TIC_API tc_Field* tico_field_get(tc_Field *field, const char *name, int index);
// TIC_API void tico_field_
// TIC_API void tico_field_destroy(tc_Field *field);
TIC_API void tico_field_draw(tc_Field *field, tc_Vec2 pos, float scale);
TIC_API void tico_field_imgui(const char *uuid, tc_Field *field);

TIC_API void tico_field_set_name(tc_Field *field, const char *name);
TIC_API const char* tico_field_get_name(tc_Field *field);
TIC_API void tico_field_get_type(tc_Field field);
TIC_API const char* tico_field_get_type_name(tc_Field field, int type);
// TIC_API const char* tico_field_get_typename(tc_Field *field, int type);

TIC_API int tico_field_is_equal(tc_Field *field0, tc_Field *field1);

FIELD_TYPE(number, float);
FIELD_TYPE(string, const char*);
FIELD_TYPE(boolean, int);
FIELD_TYPE(vec2, tc_Vec2);
FIELD_TYPE(vec3, tc_Vec3);
FIELD_TYPE(vec4, tc_Vec4);
// FIELD_TYPE(rect, tc_Rectf);
FIELD_TYPE(circle, tc_Circlef);
// FIELD_TYPE(color, tc_Color);
// FIELD_TYPE(resource, const char*);
FIELD_TYPE(object, tc_Field*);
FIELD_TYPE(array, tc_Field*);

#endif